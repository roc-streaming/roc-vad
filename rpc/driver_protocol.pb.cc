// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: driver_protocol.proto
// Protobuf C++ Version: 5.26.1

#include "driver_protocol.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace rvpb {

inline constexpr RvPacketEncoding::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        encoding_id_{0u},
        sample_rate_{0u},
        sample_format_{static_cast< ::rvpb::RvSampleFormat >(0)},
        channel_layout_{static_cast< ::rvpb::RvChannelLayout >(0)},
        track_count_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR RvPacketEncoding::RvPacketEncoding(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvPacketEncodingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvPacketEncodingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvPacketEncodingDefaultTypeInternal() {}
  union {
    RvPacketEncoding _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvPacketEncodingDefaultTypeInternal _RvPacketEncoding_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR RvNone::RvNone(::_pbi::ConstantInitialized) {}
struct RvNoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvNoneDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvNoneDefaultTypeInternal() {}
  union {
    RvNone _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvNoneDefaultTypeInternal _RvNone_default_instance_;

inline constexpr RvEndpointInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uri_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        slot_{0u},
        interface_{static_cast< ::rvpb::RvInterface >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RvEndpointInfo::RvEndpointInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvEndpointInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvEndpointInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvEndpointInfoDefaultTypeInternal() {}
  union {
    RvEndpointInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvEndpointInfoDefaultTypeInternal _RvEndpointInfo_default_instance_;

inline constexpr RvDriverInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        commit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RvDriverInfo::RvDriverInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvDriverInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvDriverInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvDriverInfoDefaultTypeInternal() {}
  union {
    RvDriverInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvDriverInfoDefaultTypeInternal _RvDriverInfo_default_instance_;

inline constexpr RvDeviceSelector::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : Selector_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR RvDeviceSelector::RvDeviceSelector(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvDeviceSelectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvDeviceSelectorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvDeviceSelectorDefaultTypeInternal() {}
  union {
    RvDeviceSelector _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvDeviceSelectorDefaultTypeInternal _RvDeviceSelector_default_instance_;

inline constexpr RvToggleRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        device_{nullptr},
        enabled_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RvToggleRequest::RvToggleRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvToggleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvToggleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvToggleRequestDefaultTypeInternal() {}
  union {
    RvToggleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvToggleRequestDefaultTypeInternal _RvToggleRequest_default_instance_;

inline constexpr RvSenderConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        packet_encoding_{nullptr},
        packet_length_{nullptr},
        target_latency_{nullptr},
        latency_tolerance_{nullptr},
        packet_interleaving_{false},
        fec_encoding_{static_cast< ::rvpb::RvFecEncoding >(0)},
        fec_block_source_packets_{0u},
        fec_block_repair_packets_{0u},
        latency_tuner_backend_{static_cast< ::rvpb::RvLatencyTunerBackend >(0)},
        latency_tuner_profile_{static_cast< ::rvpb::RvLatencyTunerProfile >(0)},
        resampler_backend_{static_cast< ::rvpb::RvResamplerBackend >(0)},
        resampler_profile_{static_cast< ::rvpb::RvResamplerProfile >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RvSenderConfig::RvSenderConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvSenderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvSenderConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvSenderConfigDefaultTypeInternal() {}
  union {
    RvSenderConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvSenderConfigDefaultTypeInternal _RvSenderConfig_default_instance_;

inline constexpr RvReceiverConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        packet_encodings_{},
        target_latency_{nullptr},
        no_playback_timeout_{nullptr},
        choppy_playback_timeout_{nullptr},
        latency_tolerance_{nullptr},
        latency_tuner_backend_{static_cast< ::rvpb::RvLatencyTunerBackend >(0)},
        latency_tuner_profile_{static_cast< ::rvpb::RvLatencyTunerProfile >(0)},
        resampler_backend_{static_cast< ::rvpb::RvResamplerBackend >(0)},
        resampler_profile_{static_cast< ::rvpb::RvResamplerProfile >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RvReceiverConfig::RvReceiverConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvReceiverConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvReceiverConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvReceiverConfigDefaultTypeInternal() {}
  union {
    RvReceiverConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvReceiverConfigDefaultTypeInternal _RvReceiverConfig_default_instance_;

inline constexpr RvLogEntry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        level_{static_cast< ::rvpb::RvLogEntry_Level >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RvLogEntry::RvLogEntry(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvLogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvLogEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvLogEntryDefaultTypeInternal() {}
  union {
    RvLogEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvLogEntryDefaultTypeInternal _RvLogEntry_default_instance_;

inline constexpr RvEndpointRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        device_{nullptr},
        endpoint_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RvEndpointRequest::RvEndpointRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvEndpointRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvEndpointRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvEndpointRequestDefaultTypeInternal() {}
  union {
    RvEndpointRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvEndpointRequestDefaultTypeInternal _RvEndpointRequest_default_instance_;

inline constexpr RvDeviceEncoding::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        buffer_length_{nullptr},
        sample_rate_{0u},
        channel_layout_{static_cast< ::rvpb::RvChannelLayout >(0)},
        track_count_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR RvDeviceEncoding::RvDeviceEncoding(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvDeviceEncodingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvDeviceEncodingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvDeviceEncodingDefaultTypeInternal() {}
  union {
    RvDeviceEncoding _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvDeviceEncodingDefaultTypeInternal _RvDeviceEncoding_default_instance_;

inline constexpr RvDeviceInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        local_endpoints_{},
        remote_endpoints_{},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_encoding_{nullptr},
        type_{static_cast< ::rvpb::RvDeviceType >(0)},
        index_{0u},
        enabled_{false},
        NetworkConfig_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR RvDeviceInfo::RvDeviceInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvDeviceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvDeviceInfoDefaultTypeInternal() {}
  union {
    RvDeviceInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvDeviceInfoDefaultTypeInternal _RvDeviceInfo_default_instance_;

inline constexpr RvDeviceList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : devices_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RvDeviceList::RvDeviceList(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RvDeviceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RvDeviceListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RvDeviceListDefaultTypeInternal() {}
  union {
    RvDeviceList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RvDeviceListDefaultTypeInternal _RvDeviceList_default_instance_;
}  // namespace rvpb
static ::_pb::Metadata file_level_metadata_driver_5fprotocol_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_driver_5fprotocol_2eproto[10];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_driver_5fprotocol_2eproto = nullptr;
const ::uint32_t
    TableStruct_driver_5fprotocol_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rvpb::RvNone, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDriverInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDriverInfo, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDriverInfo, _impl_.commit_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvLogEntry, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvLogEntry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvLogEntry, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvLogEntry, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvLogEntry, _impl_.text_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceSelector, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceSelector, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceSelector, _impl_.Selector_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_.enabled_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_.device_encoding_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_.local_endpoints_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_.remote_endpoints_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_.NetworkConfig_),
        ~0u,
        3,
        0,
        1,
        4,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceList, _impl_.devices_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvToggleRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvToggleRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvToggleRequest, _impl_.device_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvToggleRequest, _impl_.enabled_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::rvpb::RvEndpointRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvEndpointRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvEndpointRequest, _impl_.device_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvEndpointRequest, _impl_.endpoint_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::rvpb::RvEndpointInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvEndpointInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvEndpointInfo, _impl_.slot_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvEndpointInfo, _impl_.interface_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvEndpointInfo, _impl_.uri_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.packet_encoding_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.packet_length_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.packet_interleaving_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.fec_encoding_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.fec_block_source_packets_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.fec_block_repair_packets_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.latency_tuner_backend_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.latency_tuner_profile_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.resampler_backend_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.resampler_profile_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.target_latency_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvSenderConfig, _impl_.latency_tolerance_),
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_.packet_encodings_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_.latency_tuner_backend_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_.latency_tuner_profile_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_.resampler_backend_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_.resampler_profile_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_.target_latency_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_.latency_tolerance_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_.no_playback_timeout_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvReceiverConfig, _impl_.choppy_playback_timeout_),
        ~0u,
        4,
        5,
        6,
        7,
        0,
        3,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceEncoding, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceEncoding, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceEncoding, _impl_.sample_rate_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceEncoding, _impl_.channel_layout_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceEncoding, _impl_.buffer_length_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceEncoding, _impl_.track_count_),
        1,
        2,
        0,
        3,
        PROTOBUF_FIELD_OFFSET(::rvpb::RvPacketEncoding, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvPacketEncoding, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rvpb::RvPacketEncoding, _impl_.encoding_id_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvPacketEncoding, _impl_.sample_rate_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvPacketEncoding, _impl_.sample_format_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvPacketEncoding, _impl_.channel_layout_),
        PROTOBUF_FIELD_OFFSET(::rvpb::RvPacketEncoding, _impl_.track_count_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::rvpb::RvNone)},
        {8, -1, -1, sizeof(::rvpb::RvDriverInfo)},
        {18, 29, -1, sizeof(::rvpb::RvLogEntry)},
        {32, -1, -1, sizeof(::rvpb::RvDeviceSelector)},
        {43, 62, -1, sizeof(::rvpb::RvDeviceInfo)},
        {72, -1, -1, sizeof(::rvpb::RvDeviceList)},
        {81, 91, -1, sizeof(::rvpb::RvToggleRequest)},
        {93, 103, -1, sizeof(::rvpb::RvEndpointRequest)},
        {105, 116, -1, sizeof(::rvpb::RvEndpointInfo)},
        {119, 139, -1, sizeof(::rvpb::RvSenderConfig)},
        {151, 168, -1, sizeof(::rvpb::RvReceiverConfig)},
        {177, 189, -1, sizeof(::rvpb::RvDeviceEncoding)},
        {193, 206, -1, sizeof(::rvpb::RvPacketEncoding)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::rvpb::_RvNone_default_instance_._instance,
    &::rvpb::_RvDriverInfo_default_instance_._instance,
    &::rvpb::_RvLogEntry_default_instance_._instance,
    &::rvpb::_RvDeviceSelector_default_instance_._instance,
    &::rvpb::_RvDeviceInfo_default_instance_._instance,
    &::rvpb::_RvDeviceList_default_instance_._instance,
    &::rvpb::_RvToggleRequest_default_instance_._instance,
    &::rvpb::_RvEndpointRequest_default_instance_._instance,
    &::rvpb::_RvEndpointInfo_default_instance_._instance,
    &::rvpb::_RvSenderConfig_default_instance_._instance,
    &::rvpb::_RvReceiverConfig_default_instance_._instance,
    &::rvpb::_RvDeviceEncoding_default_instance_._instance,
    &::rvpb::_RvPacketEncoding_default_instance_._instance,
};
const char descriptor_table_protodef_driver_5fprotocol_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025driver_protocol.proto\022\004rvpb\032\036google/pr"
    "otobuf/duration.proto\032\037google/protobuf/t"
    "imestamp.proto\"\010\n\006RvNone\"/\n\014RvDriverInfo"
    "\022\017\n\007version\030\001 \001(\t\022\016\n\006commit\030\002 \001(\t\"\263\001\n\nRv"
    "LogEntry\022(\n\004time\030\001 \001(\0132\032.google.protobuf"
    ".Timestamp\022%\n\005level\030\002 \001(\0162\026.rvpb.RvLogEn"
    "try.Level\022\014\n\004text\030\003 \001(\t\"F\n\005Level\022\010\n\004CRIT"
    "\020\000\022\t\n\005ERROR\020\001\022\010\n\004WARN\020\002\022\010\n\004INFO\020\003\022\t\n\005DEB"
    "UG\020\004\022\t\n\005TRACE\020\005\">\n\020RvDeviceSelector\022\017\n\005i"
    "ndex\030\001 \001(\rH\000\022\r\n\003uid\030\002 \001(\tH\000B\n\n\010Selector\""
    "\251\003\n\014RvDeviceInfo\022 \n\004type\030\001 \001(\0162\022.rvpb.Rv"
    "DeviceType\022\022\n\005index\030\002 \001(\rH\001\210\001\001\022\020\n\003uid\030\003 "
    "\001(\tH\002\210\001\001\022\021\n\004name\030\004 \001(\tH\003\210\001\001\022\024\n\007enabled\030\005"
    " \001(\010H\004\210\001\001\022/\n\017device_encoding\030\006 \001(\0132\026.rvp"
    "b.RvDeviceEncoding\022-\n\rsender_config\030\007 \001("
    "\0132\024.rvpb.RvSenderConfigH\000\0221\n\017receiver_co"
    "nfig\030\010 \001(\0132\026.rvpb.RvReceiverConfigH\000\022-\n\017"
    "local_endpoints\030\t \003(\0132\024.rvpb.RvEndpointI"
    "nfo\022.\n\020remote_endpoints\030\n \003(\0132\024.rvpb.RvE"
    "ndpointInfoB\017\n\rNetworkConfigB\010\n\006_indexB\006"
    "\n\004_uidB\007\n\005_nameB\n\n\010_enabled\"3\n\014RvDeviceL"
    "ist\022#\n\007devices\030\001 \003(\0132\022.rvpb.RvDeviceInfo"
    "\"J\n\017RvToggleRequest\022&\n\006device\030\001 \001(\0132\026.rv"
    "pb.RvDeviceSelector\022\017\n\007enabled\030\002 \001(\010\"c\n\021"
    "RvEndpointRequest\022&\n\006device\030\001 \001(\0132\026.rvpb"
    ".RvDeviceSelector\022&\n\010endpoint\030\002 \001(\0132\024.rv"
    "pb.RvEndpointInfo\"_\n\016RvEndpointInfo\022\021\n\004s"
    "lot\030\001 \001(\rH\000\210\001\001\022$\n\tinterface\030\002 \001(\0162\021.rvpb"
    ".RvInterface\022\013\n\003uri\030\003 \001(\tB\007\n\005_slot\"\230\007\n\016R"
    "vSenderConfig\0224\n\017packet_encoding\030\001 \001(\0132\026"
    ".rvpb.RvPacketEncodingH\000\210\001\001\0225\n\rpacket_le"
    "ngth\030\002 \001(\0132\031.google.protobuf.DurationH\001\210"
    "\001\001\022 \n\023packet_interleaving\030\003 \001(\010H\002\210\001\001\022.\n\014"
    "fec_encoding\030\004 \001(\0162\023.rvpb.RvFecEncodingH"
    "\003\210\001\001\022%\n\030fec_block_source_packets\030\005 \001(\rH\004"
    "\210\001\001\022%\n\030fec_block_repair_packets\030\006 \001(\rH\005\210"
    "\001\001\022\?\n\025latency_tuner_backend\030\007 \001(\0162\033.rvpb"
    ".RvLatencyTunerBackendH\006\210\001\001\022\?\n\025latency_t"
    "uner_profile\030\010 \001(\0162\033.rvpb.RvLatencyTuner"
    "ProfileH\007\210\001\001\0228\n\021resampler_backend\030\t \001(\0162"
    "\030.rvpb.RvResamplerBackendH\010\210\001\001\0228\n\021resamp"
    "ler_profile\030\n \001(\0162\030.rvpb.RvResamplerProf"
    "ileH\t\210\001\001\0226\n\016target_latency\030\013 \001(\0132\031.googl"
    "e.protobuf.DurationH\n\210\001\001\0229\n\021latency_tole"
    "rance\030\r \001(\0132\031.google.protobuf.DurationH\013"
    "\210\001\001B\022\n\020_packet_encodingB\020\n\016_packet_lengt"
    "hB\026\n\024_packet_interleavingB\017\n\r_fec_encodi"
    "ngB\033\n\031_fec_block_source_packetsB\033\n\031_fec_"
    "block_repair_packetsB\030\n\026_latency_tuner_b"
    "ackendB\030\n\026_latency_tuner_profileB\024\n\022_res"
    "ampler_backendB\024\n\022_resampler_profileB\021\n\017"
    "_target_latencyB\024\n\022_latency_tolerance\"\350\005"
    "\n\020RvReceiverConfig\0220\n\020packet_encodings\030\001"
    " \003(\0132\026.rvpb.RvPacketEncoding\022\?\n\025latency_"
    "tuner_backend\030\002 \001(\0162\033.rvpb.RvLatencyTune"
    "rBackendH\000\210\001\001\022\?\n\025latency_tuner_profile\030\003"
    " \001(\0162\033.rvpb.RvLatencyTunerProfileH\001\210\001\001\0228"
    "\n\021resampler_backend\030\004 \001(\0162\030.rvpb.RvResam"
    "plerBackendH\002\210\001\001\0228\n\021resampler_profile\030\005 "
    "\001(\0162\030.rvpb.RvResamplerProfileH\003\210\001\001\0226\n\016ta"
    "rget_latency\030\006 \001(\0132\031.google.protobuf.Dur"
    "ationH\004\210\001\001\0229\n\021latency_tolerance\030\013 \001(\0132\031."
    "google.protobuf.DurationH\005\210\001\001\022;\n\023no_play"
    "back_timeout\030\t \001(\0132\031.google.protobuf.Dur"
    "ationH\006\210\001\001\022\?\n\027choppy_playback_timeout\030\n "
    "\001(\0132\031.google.protobuf.DurationH\007\210\001\001B\030\n\026_"
    "latency_tuner_backendB\030\n\026_latency_tuner_"
    "profileB\024\n\022_resampler_backendB\024\n\022_resamp"
    "ler_profileB\021\n\017_target_latencyB\024\n\022_laten"
    "cy_toleranceB\026\n\024_no_playback_timeoutB\032\n\030"
    "_choppy_playback_timeout\"\366\001\n\020RvDeviceEnc"
    "oding\022\030\n\013sample_rate\030\001 \001(\rH\000\210\001\001\0222\n\016chann"
    "el_layout\030\002 \001(\0162\025.rvpb.RvChannelLayoutH\001"
    "\210\001\001\0225\n\rbuffer_length\030\003 \001(\0132\031.google.prot"
    "obuf.DurationH\002\210\001\001\022\030\n\013track_count\030\004 \001(\rH"
    "\003\210\001\001B\016\n\014_sample_rateB\021\n\017_channel_layoutB"
    "\020\n\016_buffer_lengthB\016\n\014_track_count\"\302\001\n\020Rv"
    "PacketEncoding\022\023\n\013encoding_id\030\001 \001(\r\022\023\n\013s"
    "ample_rate\030\002 \001(\r\022+\n\rsample_format\030\003 \001(\0162"
    "\024.rvpb.RvSampleFormat\022-\n\016channel_layout\030"
    "\004 \001(\0162\025.rvpb.RvChannelLayout\022\030\n\013track_co"
    "unt\030\005 \001(\rH\000\210\001\001B\016\n\014_track_count*F\n\014RvDevi"
    "ceType\022\031\n\025RV_DEVICE_TYPE_SENDER\020\000\022\033\n\027RV_"
    "DEVICE_TYPE_RECEIVER\020\001*\212\001\n\013RvInterface\022\035"
    "\n\031RV_INTERFACE_CONSOLIDATED\020\000\022\035\n\031RV_INTE"
    "RFACE_AUDIO_SOURCE\020\001\022\035\n\031RV_INTERFACE_AUD"
    "IO_REPAIR\020\002\022\036\n\032RV_INTERFACE_AUDIO_CONTRO"
    "L\020\003*+\n\016RvSampleFormat\022\031\n\025ROC_FORMAT_PCM_"
    "SINT16\020\000*m\n\017RvChannelLayout\022\032\n\026RV_CHANNE"
    "L_LAYOUT_MONO\020\000\022\034\n\030RV_CHANNEL_LAYOUT_STE"
    "REO\020\001\022 \n\034RV_CHANNEL_LAYOUT_MULTITRACK\020\002*"
    "\207\001\n\rRvFecEncoding\022\033\n\027RV_FEC_ENCODING_DIS"
    "ABLE\020\000\022\033\n\027RV_FEC_ENCODING_DEFAULT\020\001\022\030\n\024R"
    "V_FEC_ENCODING_RS8M\020\002\022\"\n\036RV_FEC_ENCODING"
    "_LDPC_STAIRCASE\020\003*_\n\025RvLatencyTunerBacke"
    "nd\022$\n RV_LATENCY_TUNER_BACKEND_DEFAULT\020\000"
    "\022 \n\034RV_LATENCY_TUNER_BACKEND_NIQ\020\002*\261\001\n\025R"
    "vLatencyTunerProfile\022$\n RV_LATENCY_TUNER"
    "_PROFILE_DEFAULT\020\000\022#\n\037RV_LATENCY_TUNER_P"
    "ROFILE_INTACT\020\001\022\'\n#RV_LATENCY_TUNER_PROF"
    "ILE_RESPONSIVE\020\002\022$\n RV_LATENCY_TUNER_PRO"
    "FILE_GRADUAL\020\003*\233\001\n\022RvResamplerBackend\022 \n"
    "\034RV_RESAMPLER_BACKEND_DEFAULT\020\000\022 \n\034RV_RE"
    "SAMPLER_BACKEND_BUILTIN\020\001\022\036\n\032RV_RESAMPLE"
    "R_BACKEND_SPEEX\020\002\022!\n\035RV_RESAMPLER_BACKEN"
    "D_SPEEXDEC\020\003*\224\001\n\022RvResamplerProfile\022 \n\034R"
    "V_RESAMPLER_PROFILE_DEFAULT\020\000\022\035\n\031RV_RESA"
    "MPLER_PROFILE_HIGH\020\001\022\037\n\033RV_RESAMPLER_PRO"
    "FILE_MEDIUM\020\002\022\034\n\030RV_RESAMPLER_PROFILE_LO"
    "W\020\0032\247\004\n\010RvDriver\022$\n\004ping\022\014.rvpb.RvNone\032\014"
    ".rvpb.RvNone\"\000\0221\n\013driver_info\022\014.rvpb.RvN"
    "one\032\022.rvpb.RvDriverInfo\"\000\0221\n\013stream_logs"
    "\022\014.rvpb.RvNone\032\020.rvpb.RvLogEntry\"\0000\001\0225\n\017"
    "get_all_devices\022\014.rvpb.RvNone\032\022.rvpb.RvD"
    "eviceList\"\000\022:\n\nget_device\022\026.rvpb.RvDevic"
    "eSelector\032\022.rvpb.RvDeviceInfo\"\000\0226\n\nadd_d"
    "evice\022\022.rvpb.RvDeviceInfo\032\022.rvpb.RvDevic"
    "eInfo\"\000\0227\n\rdelete_device\022\026.rvpb.RvDevice"
    "Selector\032\014.rvpb.RvNone\"\000\0226\n\rtoggle_devic"
    "e\022\025.rvpb.RvToggleRequest\032\014.rvpb.RvNone\"\000"
    "\0227\n\004bind\022\027.rvpb.RvEndpointRequest\032\024.rvpb"
    ".RvEndpointInfo\"\000\022:\n\007connect\022\027.rvpb.RvEn"
    "dpointRequest\032\024.rvpb.RvEndpointInfo\"\000b\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_driver_5fprotocol_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_driver_5fprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_driver_5fprotocol_2eproto = {
    false,
    false,
    4925,
    descriptor_table_protodef_driver_5fprotocol_2eproto,
    "driver_protocol.proto",
    &descriptor_table_driver_5fprotocol_2eproto_once,
    descriptor_table_driver_5fprotocol_2eproto_deps,
    2,
    13,
    schemas,
    file_default_instances,
    TableStruct_driver_5fprotocol_2eproto::offsets,
    file_level_metadata_driver_5fprotocol_2eproto,
    file_level_enum_descriptors_driver_5fprotocol_2eproto,
    file_level_service_descriptors_driver_5fprotocol_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_driver_5fprotocol_2eproto_getter() {
  return &descriptor_table_driver_5fprotocol_2eproto;
}
namespace rvpb {
const ::google::protobuf::EnumDescriptor* RvLogEntry_Level_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t RvLogEntry_Level_internal_data_[] = {
    393216u, 0u, };
bool RvLogEntry_Level_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RvLogEntry_Level RvLogEntry::CRIT;
constexpr RvLogEntry_Level RvLogEntry::ERROR;
constexpr RvLogEntry_Level RvLogEntry::WARN;
constexpr RvLogEntry_Level RvLogEntry::INFO;
constexpr RvLogEntry_Level RvLogEntry::DEBUG;
constexpr RvLogEntry_Level RvLogEntry::TRACE;
constexpr RvLogEntry_Level RvLogEntry::Level_MIN;
constexpr RvLogEntry_Level RvLogEntry::Level_MAX;
constexpr int RvLogEntry::Level_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RvDeviceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t RvDeviceType_internal_data_[] = {
    131072u, 0u, };
bool RvDeviceType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* RvInterface_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t RvInterface_internal_data_[] = {
    262144u, 0u, };
bool RvInterface_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* RvSampleFormat_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t RvSampleFormat_internal_data_[] = {
    65536u, 0u, };
bool RvSampleFormat_IsValid(int value) {
  return 0 <= value && value <= 0;
}
const ::google::protobuf::EnumDescriptor* RvChannelLayout_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t RvChannelLayout_internal_data_[] = {
    196608u, 0u, };
bool RvChannelLayout_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* RvFecEncoding_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t RvFecEncoding_internal_data_[] = {
    262144u, 0u, };
bool RvFecEncoding_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* RvLatencyTunerBackend_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t RvLatencyTunerBackend_internal_data_[] = {
    65536u, 32u, 2u, };
bool RvLatencyTunerBackend_IsValid(int value) {
  return 0 <= value && value <= 2 && ((5u >> value) & 1) != 0;
}
const ::google::protobuf::EnumDescriptor* RvLatencyTunerProfile_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t RvLatencyTunerProfile_internal_data_[] = {
    262144u, 0u, };
bool RvLatencyTunerProfile_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* RvResamplerBackend_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t RvResamplerBackend_internal_data_[] = {
    262144u, 0u, };
bool RvResamplerBackend_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* RvResamplerProfile_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto);
  return file_level_enum_descriptors_driver_5fprotocol_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t RvResamplerProfile_internal_data_[] = {
    262144u, 0u, };
bool RvResamplerProfile_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class RvNone::_Internal {
 public:
};

RvNone::RvNone(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:rvpb.RvNone)
}
RvNone::RvNone(
    ::google::protobuf::Arena* arena,
    const RvNone& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  RvNone* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:rvpb.RvNone)
}









::google::protobuf::Metadata RvNone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[0]);
}
// ===================================================================

class RvDriverInfo::_Internal {
 public:
};

RvDriverInfo::RvDriverInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvDriverInfo)
}
inline PROTOBUF_NDEBUG_INLINE RvDriverInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : version_(arena, from.version_),
        commit_(arena, from.commit_),
        _cached_size_{0} {}

RvDriverInfo::RvDriverInfo(
    ::google::protobuf::Arena* arena,
    const RvDriverInfo& from)
    : ::google::protobuf::Message(arena) {
  RvDriverInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:rvpb.RvDriverInfo)
}
inline PROTOBUF_NDEBUG_INLINE RvDriverInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : version_(arena),
        commit_(arena),
        _cached_size_{0} {}

inline void RvDriverInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RvDriverInfo::~RvDriverInfo() {
  // @@protoc_insertion_point(destructor:rvpb.RvDriverInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvDriverInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.version_.Destroy();
  _impl_.commit_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvDriverInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvDriverInfo, _impl_._cached_size_),
              false,
          },
          &RvDriverInfo::MergeImpl,
          &RvDriverInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvDriverInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvDriverInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.commit_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvDriverInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 39, 2> RvDriverInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RvDriverInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvDriverInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string commit = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RvDriverInfo, _impl_.commit_)}},
    // string version = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RvDriverInfo, _impl_.version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string version = 1;
    {PROTOBUF_FIELD_OFFSET(RvDriverInfo, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string commit = 2;
    {PROTOBUF_FIELD_OFFSET(RvDriverInfo, _impl_.commit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\21\7\6\0\0\0\0\0"
    "rvpb.RvDriverInfo"
    "version"
    "commit"
  }},
};

::uint8_t* RvDriverInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvDriverInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rvpb.RvDriverInfo.version");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string commit = 2;
  if (!this->_internal_commit().empty()) {
    const std::string& _s = this->_internal_commit();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rvpb.RvDriverInfo.commit");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvDriverInfo)
  return target;
}

::size_t RvDriverInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvDriverInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string commit = 2;
  if (!this->_internal_commit().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_commit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvDriverInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvDriverInfo*>(&to_msg);
  auto& from = static_cast<const RvDriverInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvDriverInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_commit().empty()) {
    _this->_internal_set_commit(from._internal_commit());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvDriverInfo::CopyFrom(const RvDriverInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvDriverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvDriverInfo::IsInitialized() const {
  return true;
}

void RvDriverInfo::InternalSwap(RvDriverInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commit_, &other->_impl_.commit_, arena);
}

::google::protobuf::Metadata RvDriverInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[1]);
}
// ===================================================================

class RvLogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<RvLogEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_._has_bits_);
};

void RvLogEntry::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RvLogEntry::RvLogEntry(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvLogEntry)
}
inline PROTOBUF_NDEBUG_INLINE RvLogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        text_(arena, from.text_) {}

RvLogEntry::RvLogEntry(
    ::google::protobuf::Arena* arena,
    const RvLogEntry& from)
    : ::google::protobuf::Message(arena) {
  RvLogEntry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:rvpb.RvLogEntry)
}
inline PROTOBUF_NDEBUG_INLINE RvLogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        text_(arena) {}

inline void RvLogEntry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, level_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::level_));
}
RvLogEntry::~RvLogEntry() {
  // @@protoc_insertion_point(destructor:rvpb.RvLogEntry)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvLogEntry::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  delete _impl_.time_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvLogEntry::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_._cached_size_),
              false,
          },
          &RvLogEntry::MergeImpl,
          &RvLogEntry::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvLogEntry)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  _impl_.level_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvLogEntry::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 28, 2> RvLogEntry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RvLogEntry_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvLogEntry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp time = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_.time_)}},
    // .rvpb.RvLogEntry.Level level = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvLogEntry, _impl_.level_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_.level_)}},
    // string text = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_.text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp time = 1;
    {PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .rvpb.RvLogEntry.Level level = 2;
    {PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string text = 3;
    {PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_.text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\17\0\0\4\0\0\0\0"
    "rvpb.RvLogEntry"
    "text"
  }},
};

::uint8_t* RvLogEntry::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvLogEntry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.time_, _impl_.time_->GetCachedSize(), target, stream);
  }

  // .rvpb.RvLogEntry.Level level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_level(), target);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rvpb.RvLogEntry.text");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvLogEntry)
  return target;
}

::size_t RvLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvLogEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .google.protobuf.Timestamp time = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
  }

  // .rvpb.RvLogEntry.Level level = 2;
  if (this->_internal_level() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvLogEntry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvLogEntry*>(&to_msg);
  auto& from = static_cast<const RvLogEntry&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvLogEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.time_ != nullptr);
    if (_this->_impl_.time_ == nullptr) {
      _this->_impl_.time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
    } else {
      _this->_impl_.time_->MergeFrom(*from._impl_.time_);
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvLogEntry::CopyFrom(const RvLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvLogEntry::IsInitialized() const {
  return true;
}

void RvLogEntry::InternalSwap(RvLogEntry* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_.level_)
      + sizeof(RvLogEntry::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(RvLogEntry, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata RvLogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[2]);
}
// ===================================================================

class RvDeviceSelector::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceSelector, _impl_._oneof_case_);
};

RvDeviceSelector::RvDeviceSelector(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvDeviceSelector)
}
inline PROTOBUF_NDEBUG_INLINE RvDeviceSelector::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : Selector_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

RvDeviceSelector::RvDeviceSelector(
    ::google::protobuf::Arena* arena,
    const RvDeviceSelector& from)
    : ::google::protobuf::Message(arena) {
  RvDeviceSelector* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (Selector_case()) {
    case SELECTOR_NOT_SET:
      break;
      case kIndex:
        _impl_.Selector_.index_ = from._impl_.Selector_.index_;
        break;
      case kUid:
        new (&_impl_.Selector_.uid_) decltype(_impl_.Selector_.uid_){arena, from._impl_.Selector_.uid_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:rvpb.RvDeviceSelector)
}
inline PROTOBUF_NDEBUG_INLINE RvDeviceSelector::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : Selector_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void RvDeviceSelector::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RvDeviceSelector::~RvDeviceSelector() {
  // @@protoc_insertion_point(destructor:rvpb.RvDeviceSelector)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvDeviceSelector::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_Selector()) {
    clear_Selector();
  }
  _impl_.~Impl_();
}

void RvDeviceSelector::clear_Selector() {
// @@protoc_insertion_point(one_of_clear_start:rvpb.RvDeviceSelector)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (Selector_case()) {
    case kIndex: {
      // No need to clear
      break;
    }
    case kUid: {
      _impl_.Selector_.uid_.Destroy();
      break;
    }
    case SELECTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SELECTOR_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
RvDeviceSelector::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvDeviceSelector, _impl_._cached_size_),
              false,
          },
          &RvDeviceSelector::MergeImpl,
          &RvDeviceSelector::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvDeviceSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvDeviceSelector)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Selector();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvDeviceSelector::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 33, 2> RvDeviceSelector::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RvDeviceSelector_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvDeviceSelector>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1;
    {PROTOBUF_FIELD_OFFSET(RvDeviceSelector, _impl_.Selector_.index_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt32)},
    // string uid = 2;
    {PROTOBUF_FIELD_OFFSET(RvDeviceSelector, _impl_.Selector_.uid_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\25\0\3\0\0\0\0\0"
    "rvpb.RvDeviceSelector"
    "uid"
  }},
};

::uint8_t* RvDeviceSelector::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvDeviceSelector)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (Selector_case()) {
    case kIndex: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this->_internal_index(), target);
      break;
    }
    case kUid: {
      const std::string& _s = this->_internal_uid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rvpb.RvDeviceSelector.uid");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvDeviceSelector)
  return target;
}

::size_t RvDeviceSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvDeviceSelector)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Selector_case()) {
    // uint32 index = 1;
    case kIndex: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_index());
      break;
    }
    // string uid = 2;
    case kUid: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_uid());
      break;
    }
    case SELECTOR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvDeviceSelector::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvDeviceSelector*>(&to_msg);
  auto& from = static_cast<const RvDeviceSelector&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvDeviceSelector)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_Selector();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kIndex: {
        _this->_impl_.Selector_.index_ = from._impl_.Selector_.index_;
        break;
      }
      case kUid: {
        if (oneof_needs_init) {
          _this->_impl_.Selector_.uid_.InitDefault();
        }
        _this->_impl_.Selector_.uid_.Set(from._internal_uid(), arena);
        break;
      }
      case SELECTOR_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvDeviceSelector::CopyFrom(const RvDeviceSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvDeviceSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvDeviceSelector::IsInitialized() const {
  return true;
}

void RvDeviceSelector::InternalSwap(RvDeviceSelector* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.Selector_, other->_impl_.Selector_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata RvDeviceSelector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[3]);
}
// ===================================================================

class RvDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RvDeviceInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::rvpb::RvDeviceInfo, _impl_._oneof_case_);
};

void RvDeviceInfo::set_allocated_sender_config(::rvpb::RvSenderConfig* sender_config) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_NetworkConfig();
  if (sender_config) {
    ::google::protobuf::Arena* submessage_arena = sender_config->GetArena();
    if (message_arena != submessage_arena) {
      sender_config = ::google::protobuf::internal::GetOwnedMessage(message_arena, sender_config, submessage_arena);
    }
    set_has_sender_config();
    _impl_.NetworkConfig_.sender_config_ = sender_config;
  }
  // @@protoc_insertion_point(field_set_allocated:rvpb.RvDeviceInfo.sender_config)
}
void RvDeviceInfo::set_allocated_receiver_config(::rvpb::RvReceiverConfig* receiver_config) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_NetworkConfig();
  if (receiver_config) {
    ::google::protobuf::Arena* submessage_arena = receiver_config->GetArena();
    if (message_arena != submessage_arena) {
      receiver_config = ::google::protobuf::internal::GetOwnedMessage(message_arena, receiver_config, submessage_arena);
    }
    set_has_receiver_config();
    _impl_.NetworkConfig_.receiver_config_ = receiver_config;
  }
  // @@protoc_insertion_point(field_set_allocated:rvpb.RvDeviceInfo.receiver_config)
}
RvDeviceInfo::RvDeviceInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvDeviceInfo)
}
inline PROTOBUF_NDEBUG_INLINE RvDeviceInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        local_endpoints_{visibility, arena, from.local_endpoints_},
        remote_endpoints_{visibility, arena, from.remote_endpoints_},
        uid_(arena, from.uid_),
        name_(arena, from.name_),
        NetworkConfig_{},
        _oneof_case_{from._oneof_case_[0]} {}

RvDeviceInfo::RvDeviceInfo(
    ::google::protobuf::Arena* arena,
    const RvDeviceInfo& from)
    : ::google::protobuf::Message(arena) {
  RvDeviceInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.device_encoding_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::rvpb::RvDeviceEncoding>(
                              arena, *from._impl_.device_encoding_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::enabled_));
  switch (NetworkConfig_case()) {
    case NETWORKCONFIG_NOT_SET:
      break;
      case kSenderConfig:
        _impl_.NetworkConfig_.sender_config_ = ::google::protobuf::Message::CopyConstruct<::rvpb::RvSenderConfig>(arena, *from._impl_.NetworkConfig_.sender_config_);
        break;
      case kReceiverConfig:
        _impl_.NetworkConfig_.receiver_config_ = ::google::protobuf::Message::CopyConstruct<::rvpb::RvReceiverConfig>(arena, *from._impl_.NetworkConfig_.receiver_config_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:rvpb.RvDeviceInfo)
}
inline PROTOBUF_NDEBUG_INLINE RvDeviceInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        local_endpoints_{visibility, arena},
        remote_endpoints_{visibility, arena},
        uid_(arena),
        name_(arena),
        NetworkConfig_{},
        _oneof_case_{} {}

inline void RvDeviceInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, device_encoding_),
           0,
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, device_encoding_) +
               sizeof(Impl_::enabled_));
}
RvDeviceInfo::~RvDeviceInfo() {
  // @@protoc_insertion_point(destructor:rvpb.RvDeviceInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvDeviceInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
  delete _impl_.device_encoding_;
  if (has_NetworkConfig()) {
    clear_NetworkConfig();
  }
  _impl_.~Impl_();
}

void RvDeviceInfo::clear_NetworkConfig() {
// @@protoc_insertion_point(one_of_clear_start:rvpb.RvDeviceInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (NetworkConfig_case()) {
    case kSenderConfig: {
      if (GetArena() == nullptr) {
        delete _impl_.NetworkConfig_.sender_config_;
      }
      break;
    }
    case kReceiverConfig: {
      if (GetArena() == nullptr) {
        delete _impl_.NetworkConfig_.receiver_config_;
      }
      break;
    }
    case NETWORKCONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NETWORKCONFIG_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
RvDeviceInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_._cached_size_),
              false,
          },
          &RvDeviceInfo::MergeImpl,
          &RvDeviceInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvDeviceInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_endpoints_.Clear();
  _impl_.remote_endpoints_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.device_encoding_ != nullptr);
      _impl_.device_encoding_->Clear();
    }
  }
  _impl_.type_ = 0;
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.index_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enabled_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.enabled_));
  }
  clear_NetworkConfig();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvDeviceInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 5, 41, 2> RvDeviceInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RvDeviceInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvDeviceInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .rvpb.RvDeviceType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvDeviceInfo, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.type_)}},
    // optional uint32 index = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvDeviceInfo, _impl_.index_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.index_)}},
    // optional string uid = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.uid_)}},
    // optional string name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.name_)}},
    // optional bool enabled = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RvDeviceInfo, _impl_.enabled_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.enabled_)}},
    // .rvpb.RvDeviceEncoding device_encoding = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.device_encoding_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .rvpb.RvEndpointInfo local_endpoints = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 3, PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.local_endpoints_)}},
    // repeated .rvpb.RvEndpointInfo remote_endpoints = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 4, PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.remote_endpoints_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .rvpb.RvDeviceType type = 1;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional uint32 index = 2;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.index_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string uid = 3;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.uid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string name = 4;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enabled = 5;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.enabled_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .rvpb.RvDeviceEncoding device_encoding = 6;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.device_encoding_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .rvpb.RvSenderConfig sender_config = 7;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.NetworkConfig_.sender_config_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .rvpb.RvReceiverConfig receiver_config = 8;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.NetworkConfig_.receiver_config_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .rvpb.RvEndpointInfo local_endpoints = 9;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.local_endpoints_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .rvpb.RvEndpointInfo remote_endpoints = 10;
    {PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.remote_endpoints_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rvpb::RvDeviceEncoding>()},
    {::_pbi::TcParser::GetTable<::rvpb::RvSenderConfig>()},
    {::_pbi::TcParser::GetTable<::rvpb::RvReceiverConfig>()},
    {::_pbi::TcParser::GetTable<::rvpb::RvEndpointInfo>()},
    {::_pbi::TcParser::GetTable<::rvpb::RvEndpointInfo>()},
  }}, {{
    "\21\0\0\3\4\0\0\0\0\0\0\0\0\0\0\0"
    "rvpb.RvDeviceInfo"
    "uid"
    "name"
  }},
};

::uint8_t* RvDeviceInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvDeviceInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .rvpb.RvDeviceType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_index(), target);
  }

  // optional string uid = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rvpb.RvDeviceInfo.uid");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rvpb.RvDeviceInfo.name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool enabled = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_enabled(), target);
  }

  // .rvpb.RvDeviceEncoding device_encoding = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *_impl_.device_encoding_, _impl_.device_encoding_->GetCachedSize(), target, stream);
  }

  switch (NetworkConfig_case()) {
    case kSenderConfig: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *_impl_.NetworkConfig_.sender_config_, _impl_.NetworkConfig_.sender_config_->GetCachedSize(), target, stream);
      break;
    }
    case kReceiverConfig: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *_impl_.NetworkConfig_.receiver_config_, _impl_.NetworkConfig_.receiver_config_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // repeated .rvpb.RvEndpointInfo local_endpoints = 9;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_local_endpoints_size());
       i < n; i++) {
    const auto& repfield = this->_internal_local_endpoints().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            9, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .rvpb.RvEndpointInfo remote_endpoints = 10;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_remote_endpoints_size());
       i < n; i++) {
    const auto& repfield = this->_internal_remote_endpoints().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            10, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvDeviceInfo)
  return target;
}

::size_t RvDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvDeviceInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rvpb.RvEndpointInfo local_endpoints = 9;
  total_size += 1UL * this->_internal_local_endpoints_size();
  for (const auto& msg : this->_internal_local_endpoints()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .rvpb.RvEndpointInfo remote_endpoints = 10;
  total_size += 1UL * this->_internal_remote_endpoints_size();
  for (const auto& msg : this->_internal_remote_endpoints()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string uid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_uid());
    }

    // optional string name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // .rvpb.RvDeviceEncoding device_encoding = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.device_encoding_);
    }

  }
  // .rvpb.RvDeviceType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_index());
    }

    // optional bool enabled = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  switch (NetworkConfig_case()) {
    // .rvpb.RvSenderConfig sender_config = 7;
    case kSenderConfig: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.NetworkConfig_.sender_config_);
      break;
    }
    // .rvpb.RvReceiverConfig receiver_config = 8;
    case kReceiverConfig: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.NetworkConfig_.receiver_config_);
      break;
    }
    case NETWORKCONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvDeviceInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvDeviceInfo*>(&to_msg);
  auto& from = static_cast<const RvDeviceInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvDeviceInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_local_endpoints()->MergeFrom(
      from._internal_local_endpoints());
  _this->_internal_mutable_remote_endpoints()->MergeFrom(
      from._internal_remote_endpoints());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uid(from._internal_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.device_encoding_ != nullptr);
      if (_this->_impl_.device_encoding_ == nullptr) {
        _this->_impl_.device_encoding_ =
            ::google::protobuf::Message::CopyConstruct<::rvpb::RvDeviceEncoding>(arena, *from._impl_.device_encoding_);
      } else {
        _this->_impl_.device_encoding_->MergeFrom(*from._impl_.device_encoding_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.enabled_ = from._impl_.enabled_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_NetworkConfig();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSenderConfig: {
        if (oneof_needs_init) {
          _this->_impl_.NetworkConfig_.sender_config_ =
              ::google::protobuf::Message::CopyConstruct<::rvpb::RvSenderConfig>(arena, *from._impl_.NetworkConfig_.sender_config_);
        } else {
          _this->_impl_.NetworkConfig_.sender_config_->MergeFrom(from._internal_sender_config());
        }
        break;
      }
      case kReceiverConfig: {
        if (oneof_needs_init) {
          _this->_impl_.NetworkConfig_.receiver_config_ =
              ::google::protobuf::Message::CopyConstruct<::rvpb::RvReceiverConfig>(arena, *from._impl_.NetworkConfig_.receiver_config_);
        } else {
          _this->_impl_.NetworkConfig_.receiver_config_->MergeFrom(from._internal_receiver_config());
        }
        break;
      }
      case NETWORKCONFIG_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvDeviceInfo::CopyFrom(const RvDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvDeviceInfo::IsInitialized() const {
  return true;
}

void RvDeviceInfo::InternalSwap(RvDeviceInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.local_endpoints_.InternalSwap(&other->_impl_.local_endpoints_);
  _impl_.remote_endpoints_.InternalSwap(&other->_impl_.remote_endpoints_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.enabled_)
      + sizeof(RvDeviceInfo::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(RvDeviceInfo, _impl_.device_encoding_)>(
          reinterpret_cast<char*>(&_impl_.device_encoding_),
          reinterpret_cast<char*>(&other->_impl_.device_encoding_));
  swap(_impl_.NetworkConfig_, other->_impl_.NetworkConfig_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata RvDeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[4]);
}
// ===================================================================

class RvDeviceList::_Internal {
 public:
};

RvDeviceList::RvDeviceList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvDeviceList)
}
inline PROTOBUF_NDEBUG_INLINE RvDeviceList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : devices_{visibility, arena, from.devices_},
        _cached_size_{0} {}

RvDeviceList::RvDeviceList(
    ::google::protobuf::Arena* arena,
    const RvDeviceList& from)
    : ::google::protobuf::Message(arena) {
  RvDeviceList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:rvpb.RvDeviceList)
}
inline PROTOBUF_NDEBUG_INLINE RvDeviceList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : devices_{visibility, arena},
        _cached_size_{0} {}

inline void RvDeviceList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RvDeviceList::~RvDeviceList() {
  // @@protoc_insertion_point(destructor:rvpb.RvDeviceList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvDeviceList::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvDeviceList::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvDeviceList, _impl_._cached_size_),
              false,
          },
          &RvDeviceList::MergeImpl,
          &RvDeviceList::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvDeviceList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devices_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvDeviceList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> RvDeviceList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RvDeviceList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvDeviceList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .rvpb.RvDeviceInfo devices = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RvDeviceList, _impl_.devices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .rvpb.RvDeviceInfo devices = 1;
    {PROTOBUF_FIELD_OFFSET(RvDeviceList, _impl_.devices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rvpb::RvDeviceInfo>()},
  }}, {{
  }},
};

::uint8_t* RvDeviceList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvDeviceList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .rvpb.RvDeviceInfo devices = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_devices_size());
       i < n; i++) {
    const auto& repfield = this->_internal_devices().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvDeviceList)
  return target;
}

::size_t RvDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvDeviceList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rvpb.RvDeviceInfo devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_internal_devices()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvDeviceList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvDeviceList*>(&to_msg);
  auto& from = static_cast<const RvDeviceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvDeviceList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_devices()->MergeFrom(
      from._internal_devices());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvDeviceList::CopyFrom(const RvDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvDeviceList::IsInitialized() const {
  return true;
}

void RvDeviceList::InternalSwap(RvDeviceList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
}

::google::protobuf::Metadata RvDeviceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[5]);
}
// ===================================================================

class RvToggleRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RvToggleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RvToggleRequest, _impl_._has_bits_);
};

RvToggleRequest::RvToggleRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvToggleRequest)
}
inline PROTOBUF_NDEBUG_INLINE RvToggleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RvToggleRequest::RvToggleRequest(
    ::google::protobuf::Arena* arena,
    const RvToggleRequest& from)
    : ::google::protobuf::Message(arena) {
  RvToggleRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.device_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::rvpb::RvDeviceSelector>(
                              arena, *from._impl_.device_)
                        : nullptr;
  _impl_.enabled_ = from._impl_.enabled_;

  // @@protoc_insertion_point(copy_constructor:rvpb.RvToggleRequest)
}
inline PROTOBUF_NDEBUG_INLINE RvToggleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RvToggleRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, device_),
           0,
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, device_) +
               sizeof(Impl_::enabled_));
}
RvToggleRequest::~RvToggleRequest() {
  // @@protoc_insertion_point(destructor:rvpb.RvToggleRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvToggleRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.device_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvToggleRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvToggleRequest, _impl_._cached_size_),
              false,
          },
          &RvToggleRequest::MergeImpl,
          &RvToggleRequest::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvToggleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvToggleRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.device_ != nullptr);
    _impl_.device_->Clear();
  }
  _impl_.enabled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvToggleRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> RvToggleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RvToggleRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RvToggleRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvToggleRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool enabled = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RvToggleRequest, _impl_.enabled_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RvToggleRequest, _impl_.enabled_)}},
    // .rvpb.RvDeviceSelector device = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RvToggleRequest, _impl_.device_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .rvpb.RvDeviceSelector device = 1;
    {PROTOBUF_FIELD_OFFSET(RvToggleRequest, _impl_.device_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool enabled = 2;
    {PROTOBUF_FIELD_OFFSET(RvToggleRequest, _impl_.enabled_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rvpb::RvDeviceSelector>()},
  }}, {{
  }},
};

::uint8_t* RvToggleRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvToggleRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .rvpb.RvDeviceSelector device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.device_, _impl_.device_->GetCachedSize(), target, stream);
  }

  // bool enabled = 2;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvToggleRequest)
  return target;
}

::size_t RvToggleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvToggleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rvpb.RvDeviceSelector device = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.device_);
  }

  // bool enabled = 2;
  if (this->_internal_enabled() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvToggleRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvToggleRequest*>(&to_msg);
  auto& from = static_cast<const RvToggleRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvToggleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.device_ != nullptr);
    if (_this->_impl_.device_ == nullptr) {
      _this->_impl_.device_ =
          ::google::protobuf::Message::CopyConstruct<::rvpb::RvDeviceSelector>(arena, *from._impl_.device_);
    } else {
      _this->_impl_.device_->MergeFrom(*from._impl_.device_);
    }
  }
  if (from._internal_enabled() != 0) {
    _this->_impl_.enabled_ = from._impl_.enabled_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvToggleRequest::CopyFrom(const RvToggleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvToggleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvToggleRequest::IsInitialized() const {
  return true;
}

void RvToggleRequest::InternalSwap(RvToggleRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RvToggleRequest, _impl_.enabled_)
      + sizeof(RvToggleRequest::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(RvToggleRequest, _impl_.device_)>(
          reinterpret_cast<char*>(&_impl_.device_),
          reinterpret_cast<char*>(&other->_impl_.device_));
}

::google::protobuf::Metadata RvToggleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[6]);
}
// ===================================================================

class RvEndpointRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RvEndpointRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RvEndpointRequest, _impl_._has_bits_);
};

RvEndpointRequest::RvEndpointRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvEndpointRequest)
}
inline PROTOBUF_NDEBUG_INLINE RvEndpointRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RvEndpointRequest::RvEndpointRequest(
    ::google::protobuf::Arena* arena,
    const RvEndpointRequest& from)
    : ::google::protobuf::Message(arena) {
  RvEndpointRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.device_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::rvpb::RvDeviceSelector>(
                              arena, *from._impl_.device_)
                        : nullptr;
  _impl_.endpoint_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::rvpb::RvEndpointInfo>(
                              arena, *from._impl_.endpoint_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:rvpb.RvEndpointRequest)
}
inline PROTOBUF_NDEBUG_INLINE RvEndpointRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RvEndpointRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, device_),
           0,
           offsetof(Impl_, endpoint_) -
               offsetof(Impl_, device_) +
               sizeof(Impl_::endpoint_));
}
RvEndpointRequest::~RvEndpointRequest() {
  // @@protoc_insertion_point(destructor:rvpb.RvEndpointRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvEndpointRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.device_;
  delete _impl_.endpoint_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvEndpointRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvEndpointRequest, _impl_._cached_size_),
              false,
          },
          &RvEndpointRequest::MergeImpl,
          &RvEndpointRequest::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvEndpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvEndpointRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.device_ != nullptr);
      _impl_.device_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.endpoint_ != nullptr);
      _impl_.endpoint_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvEndpointRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> RvEndpointRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RvEndpointRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RvEndpointRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvEndpointRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .rvpb.RvEndpointInfo endpoint = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RvEndpointRequest, _impl_.endpoint_)}},
    // .rvpb.RvDeviceSelector device = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RvEndpointRequest, _impl_.device_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .rvpb.RvDeviceSelector device = 1;
    {PROTOBUF_FIELD_OFFSET(RvEndpointRequest, _impl_.device_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .rvpb.RvEndpointInfo endpoint = 2;
    {PROTOBUF_FIELD_OFFSET(RvEndpointRequest, _impl_.endpoint_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rvpb::RvDeviceSelector>()},
    {::_pbi::TcParser::GetTable<::rvpb::RvEndpointInfo>()},
  }}, {{
  }},
};

::uint8_t* RvEndpointRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvEndpointRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .rvpb.RvDeviceSelector device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.device_, _impl_.device_->GetCachedSize(), target, stream);
  }

  // .rvpb.RvEndpointInfo endpoint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.endpoint_, _impl_.endpoint_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvEndpointRequest)
  return target;
}

::size_t RvEndpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvEndpointRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .rvpb.RvDeviceSelector device = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.device_);
    }

    // .rvpb.RvEndpointInfo endpoint = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.endpoint_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvEndpointRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvEndpointRequest*>(&to_msg);
  auto& from = static_cast<const RvEndpointRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvEndpointRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.device_ != nullptr);
      if (_this->_impl_.device_ == nullptr) {
        _this->_impl_.device_ =
            ::google::protobuf::Message::CopyConstruct<::rvpb::RvDeviceSelector>(arena, *from._impl_.device_);
      } else {
        _this->_impl_.device_->MergeFrom(*from._impl_.device_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.endpoint_ != nullptr);
      if (_this->_impl_.endpoint_ == nullptr) {
        _this->_impl_.endpoint_ =
            ::google::protobuf::Message::CopyConstruct<::rvpb::RvEndpointInfo>(arena, *from._impl_.endpoint_);
      } else {
        _this->_impl_.endpoint_->MergeFrom(*from._impl_.endpoint_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvEndpointRequest::CopyFrom(const RvEndpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvEndpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvEndpointRequest::IsInitialized() const {
  return true;
}

void RvEndpointRequest::InternalSwap(RvEndpointRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RvEndpointRequest, _impl_.endpoint_)
      + sizeof(RvEndpointRequest::_impl_.endpoint_)
      - PROTOBUF_FIELD_OFFSET(RvEndpointRequest, _impl_.device_)>(
          reinterpret_cast<char*>(&_impl_.device_),
          reinterpret_cast<char*>(&other->_impl_.device_));
}

::google::protobuf::Metadata RvEndpointRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[7]);
}
// ===================================================================

class RvEndpointInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RvEndpointInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_._has_bits_);
};

RvEndpointInfo::RvEndpointInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvEndpointInfo)
}
inline PROTOBUF_NDEBUG_INLINE RvEndpointInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uri_(arena, from.uri_) {}

RvEndpointInfo::RvEndpointInfo(
    ::google::protobuf::Arena* arena,
    const RvEndpointInfo& from)
    : ::google::protobuf::Message(arena) {
  RvEndpointInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, slot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, slot_),
           offsetof(Impl_, interface_) -
               offsetof(Impl_, slot_) +
               sizeof(Impl_::interface_));

  // @@protoc_insertion_point(copy_constructor:rvpb.RvEndpointInfo)
}
inline PROTOBUF_NDEBUG_INLINE RvEndpointInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uri_(arena) {}

inline void RvEndpointInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, slot_),
           0,
           offsetof(Impl_, interface_) -
               offsetof(Impl_, slot_) +
               sizeof(Impl_::interface_));
}
RvEndpointInfo::~RvEndpointInfo() {
  // @@protoc_insertion_point(destructor:rvpb.RvEndpointInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvEndpointInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvEndpointInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_._cached_size_),
              false,
          },
          &RvEndpointInfo::MergeImpl,
          &RvEndpointInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvEndpointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvEndpointInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.slot_ = 0u;
  _impl_.interface_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvEndpointInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 31, 2> RvEndpointInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RvEndpointInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvEndpointInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 slot = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvEndpointInfo, _impl_.slot_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_.slot_)}},
    // .rvpb.RvInterface interface = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvEndpointInfo, _impl_.interface_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_.interface_)}},
    // string uri = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_.uri_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 slot = 1;
    {PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_.slot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .rvpb.RvInterface interface = 2;
    {PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_.interface_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string uri = 3;
    {PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_.uri_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\0\0\3\0\0\0\0"
    "rvpb.RvEndpointInfo"
    "uri"
  }},
};

::uint8_t* RvEndpointInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvEndpointInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_slot(), target);
  }

  // .rvpb.RvInterface interface = 2;
  if (this->_internal_interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_interface(), target);
  }

  // string uri = 3;
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rvpb.RvEndpointInfo.uri");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvEndpointInfo)
  return target;
}

::size_t RvEndpointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvEndpointInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 3;
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  // optional uint32 slot = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_slot());
  }

  // .rvpb.RvInterface interface = 2;
  if (this->_internal_interface() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_interface());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvEndpointInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvEndpointInfo*>(&to_msg);
  auto& from = static_cast<const RvEndpointInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvEndpointInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.slot_ = from._impl_.slot_;
  }
  if (from._internal_interface() != 0) {
    _this->_impl_.interface_ = from._impl_.interface_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvEndpointInfo::CopyFrom(const RvEndpointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvEndpointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvEndpointInfo::IsInitialized() const {
  return true;
}

void RvEndpointInfo::InternalSwap(RvEndpointInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, &other->_impl_.uri_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_.interface_)
      + sizeof(RvEndpointInfo::_impl_.interface_)
      - PROTOBUF_FIELD_OFFSET(RvEndpointInfo, _impl_.slot_)>(
          reinterpret_cast<char*>(&_impl_.slot_),
          reinterpret_cast<char*>(&other->_impl_.slot_));
}

::google::protobuf::Metadata RvEndpointInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[8]);
}
// ===================================================================

class RvSenderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RvSenderConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_._has_bits_);
};

void RvSenderConfig::clear_packet_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.packet_length_ != nullptr) _impl_.packet_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RvSenderConfig::clear_target_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.target_latency_ != nullptr) _impl_.target_latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RvSenderConfig::clear_latency_tolerance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.latency_tolerance_ != nullptr) _impl_.latency_tolerance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RvSenderConfig::RvSenderConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvSenderConfig)
}
inline PROTOBUF_NDEBUG_INLINE RvSenderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RvSenderConfig::RvSenderConfig(
    ::google::protobuf::Arena* arena,
    const RvSenderConfig& from)
    : ::google::protobuf::Message(arena) {
  RvSenderConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.packet_encoding_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::rvpb::RvPacketEncoding>(
                              arena, *from._impl_.packet_encoding_)
                        : nullptr;
  _impl_.packet_length_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.packet_length_)
                        : nullptr;
  _impl_.target_latency_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.target_latency_)
                        : nullptr;
  _impl_.latency_tolerance_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.latency_tolerance_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packet_interleaving_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, packet_interleaving_),
           offsetof(Impl_, resampler_profile_) -
               offsetof(Impl_, packet_interleaving_) +
               sizeof(Impl_::resampler_profile_));

  // @@protoc_insertion_point(copy_constructor:rvpb.RvSenderConfig)
}
inline PROTOBUF_NDEBUG_INLINE RvSenderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RvSenderConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packet_encoding_),
           0,
           offsetof(Impl_, resampler_profile_) -
               offsetof(Impl_, packet_encoding_) +
               sizeof(Impl_::resampler_profile_));
}
RvSenderConfig::~RvSenderConfig() {
  // @@protoc_insertion_point(destructor:rvpb.RvSenderConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvSenderConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.packet_encoding_;
  delete _impl_.packet_length_;
  delete _impl_.target_latency_;
  delete _impl_.latency_tolerance_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvSenderConfig::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_._cached_size_),
              false,
          },
          &RvSenderConfig::MergeImpl,
          &RvSenderConfig::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvSenderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvSenderConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.packet_encoding_ != nullptr);
      _impl_.packet_encoding_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.packet_length_ != nullptr);
      _impl_.packet_length_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.target_latency_ != nullptr);
      _impl_.target_latency_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.latency_tolerance_ != nullptr);
      _impl_.latency_tolerance_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.packet_interleaving_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fec_block_repair_packets_) -
        reinterpret_cast<char*>(&_impl_.packet_interleaving_)) + sizeof(_impl_.fec_block_repair_packets_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.latency_tuner_backend_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.resampler_profile_) -
        reinterpret_cast<char*>(&_impl_.latency_tuner_backend_)) + sizeof(_impl_.resampler_profile_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvSenderConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 4, 0, 2> RvSenderConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294961152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RvSenderConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvSenderConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .rvpb.RvPacketEncoding packet_encoding = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.packet_encoding_)}},
    // optional .google.protobuf.Duration packet_length = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.packet_length_)}},
    // optional bool packet_interleaving = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RvSenderConfig, _impl_.packet_interleaving_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.packet_interleaving_)}},
    // optional .rvpb.RvFecEncoding fec_encoding = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvSenderConfig, _impl_.fec_encoding_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.fec_encoding_)}},
    // optional uint32 fec_block_source_packets = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvSenderConfig, _impl_.fec_block_source_packets_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.fec_block_source_packets_)}},
    // optional uint32 fec_block_repair_packets = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvSenderConfig, _impl_.fec_block_repair_packets_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.fec_block_repair_packets_)}},
    // optional .rvpb.RvLatencyTunerBackend latency_tuner_backend = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvSenderConfig, _impl_.latency_tuner_backend_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.latency_tuner_backend_)}},
    // optional .rvpb.RvLatencyTunerProfile latency_tuner_profile = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvSenderConfig, _impl_.latency_tuner_profile_), 9>(),
     {64, 9, 0, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.latency_tuner_profile_)}},
    // optional .rvpb.RvResamplerBackend resampler_backend = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvSenderConfig, _impl_.resampler_backend_), 10>(),
     {72, 10, 0, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.resampler_backend_)}},
    // optional .rvpb.RvResamplerProfile resampler_profile = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvSenderConfig, _impl_.resampler_profile_), 11>(),
     {80, 11, 0, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.resampler_profile_)}},
    // optional .google.protobuf.Duration target_latency = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 2, 2, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.target_latency_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .google.protobuf.Duration latency_tolerance = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 3, 3, PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.latency_tolerance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .rvpb.RvPacketEncoding packet_encoding = 1;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.packet_encoding_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration packet_length = 2;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.packet_length_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool packet_interleaving = 3;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.packet_interleaving_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .rvpb.RvFecEncoding fec_encoding = 4;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.fec_encoding_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional uint32 fec_block_source_packets = 5;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.fec_block_source_packets_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 fec_block_repair_packets = 6;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.fec_block_repair_packets_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .rvpb.RvLatencyTunerBackend latency_tuner_backend = 7;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.latency_tuner_backend_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rvpb.RvLatencyTunerProfile latency_tuner_profile = 8;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.latency_tuner_profile_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rvpb.RvResamplerBackend resampler_backend = 9;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.resampler_backend_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rvpb.RvResamplerProfile resampler_profile = 10;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.resampler_profile_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .google.protobuf.Duration target_latency = 11;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.target_latency_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration latency_tolerance = 13;
    {PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.latency_tolerance_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rvpb::RvPacketEncoding>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
  }},
};

::uint8_t* RvSenderConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvSenderConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .rvpb.RvPacketEncoding packet_encoding = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.packet_encoding_, _impl_.packet_encoding_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration packet_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.packet_length_, _impl_.packet_length_->GetCachedSize(), target, stream);
  }

  // optional bool packet_interleaving = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_packet_interleaving(), target);
  }

  // optional .rvpb.RvFecEncoding fec_encoding = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_fec_encoding(), target);
  }

  // optional uint32 fec_block_source_packets = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_fec_block_source_packets(), target);
  }

  // optional uint32 fec_block_repair_packets = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_fec_block_repair_packets(), target);
  }

  // optional .rvpb.RvLatencyTunerBackend latency_tuner_backend = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_latency_tuner_backend(), target);
  }

  // optional .rvpb.RvLatencyTunerProfile latency_tuner_profile = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_latency_tuner_profile(), target);
  }

  // optional .rvpb.RvResamplerBackend resampler_backend = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_resampler_backend(), target);
  }

  // optional .rvpb.RvResamplerProfile resampler_profile = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_resampler_profile(), target);
  }

  // optional .google.protobuf.Duration target_latency = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *_impl_.target_latency_, _impl_.target_latency_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration latency_tolerance = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *_impl_.latency_tolerance_, _impl_.latency_tolerance_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvSenderConfig)
  return target;
}

::size_t RvSenderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvSenderConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .rvpb.RvPacketEncoding packet_encoding = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.packet_encoding_);
    }

    // optional .google.protobuf.Duration packet_length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.packet_length_);
    }

    // optional .google.protobuf.Duration target_latency = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_latency_);
    }

    // optional .google.protobuf.Duration latency_tolerance = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.latency_tolerance_);
    }

    // optional bool packet_interleaving = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional .rvpb.RvFecEncoding fec_encoding = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_fec_encoding());
    }

    // optional uint32 fec_block_source_packets = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_fec_block_source_packets());
    }

    // optional uint32 fec_block_repair_packets = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_fec_block_repair_packets());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .rvpb.RvLatencyTunerBackend latency_tuner_backend = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_latency_tuner_backend());
    }

    // optional .rvpb.RvLatencyTunerProfile latency_tuner_profile = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_latency_tuner_profile());
    }

    // optional .rvpb.RvResamplerBackend resampler_backend = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_backend());
    }

    // optional .rvpb.RvResamplerProfile resampler_profile = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_profile());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvSenderConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvSenderConfig*>(&to_msg);
  auto& from = static_cast<const RvSenderConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvSenderConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.packet_encoding_ != nullptr);
      if (_this->_impl_.packet_encoding_ == nullptr) {
        _this->_impl_.packet_encoding_ =
            ::google::protobuf::Message::CopyConstruct<::rvpb::RvPacketEncoding>(arena, *from._impl_.packet_encoding_);
      } else {
        _this->_impl_.packet_encoding_->MergeFrom(*from._impl_.packet_encoding_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.packet_length_ != nullptr);
      if (_this->_impl_.packet_length_ == nullptr) {
        _this->_impl_.packet_length_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.packet_length_);
      } else {
        _this->_impl_.packet_length_->MergeFrom(*from._impl_.packet_length_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.target_latency_ != nullptr);
      if (_this->_impl_.target_latency_ == nullptr) {
        _this->_impl_.target_latency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.target_latency_);
      } else {
        _this->_impl_.target_latency_->MergeFrom(*from._impl_.target_latency_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.latency_tolerance_ != nullptr);
      if (_this->_impl_.latency_tolerance_ == nullptr) {
        _this->_impl_.latency_tolerance_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.latency_tolerance_);
      } else {
        _this->_impl_.latency_tolerance_->MergeFrom(*from._impl_.latency_tolerance_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.packet_interleaving_ = from._impl_.packet_interleaving_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.fec_encoding_ = from._impl_.fec_encoding_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fec_block_source_packets_ = from._impl_.fec_block_source_packets_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.fec_block_repair_packets_ = from._impl_.fec_block_repair_packets_;
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.latency_tuner_backend_ = from._impl_.latency_tuner_backend_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.latency_tuner_profile_ = from._impl_.latency_tuner_profile_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.resampler_backend_ = from._impl_.resampler_backend_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.resampler_profile_ = from._impl_.resampler_profile_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvSenderConfig::CopyFrom(const RvSenderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvSenderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvSenderConfig::IsInitialized() const {
  return true;
}

void RvSenderConfig::InternalSwap(RvSenderConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.resampler_profile_)
      + sizeof(RvSenderConfig::_impl_.resampler_profile_)
      - PROTOBUF_FIELD_OFFSET(RvSenderConfig, _impl_.packet_encoding_)>(
          reinterpret_cast<char*>(&_impl_.packet_encoding_),
          reinterpret_cast<char*>(&other->_impl_.packet_encoding_));
}

::google::protobuf::Metadata RvSenderConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[9]);
}
// ===================================================================

class RvReceiverConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RvReceiverConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_._has_bits_);
};

void RvReceiverConfig::clear_target_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.target_latency_ != nullptr) _impl_.target_latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RvReceiverConfig::clear_latency_tolerance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.latency_tolerance_ != nullptr) _impl_.latency_tolerance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void RvReceiverConfig::clear_no_playback_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.no_playback_timeout_ != nullptr) _impl_.no_playback_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RvReceiverConfig::clear_choppy_playback_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.choppy_playback_timeout_ != nullptr) _impl_.choppy_playback_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
RvReceiverConfig::RvReceiverConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvReceiverConfig)
}
inline PROTOBUF_NDEBUG_INLINE RvReceiverConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        packet_encodings_{visibility, arena, from.packet_encodings_} {}

RvReceiverConfig::RvReceiverConfig(
    ::google::protobuf::Arena* arena,
    const RvReceiverConfig& from)
    : ::google::protobuf::Message(arena) {
  RvReceiverConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_latency_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.target_latency_)
                        : nullptr;
  _impl_.no_playback_timeout_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.no_playback_timeout_)
                        : nullptr;
  _impl_.choppy_playback_timeout_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.choppy_playback_timeout_)
                        : nullptr;
  _impl_.latency_tolerance_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.latency_tolerance_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latency_tuner_backend_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latency_tuner_backend_),
           offsetof(Impl_, resampler_profile_) -
               offsetof(Impl_, latency_tuner_backend_) +
               sizeof(Impl_::resampler_profile_));

  // @@protoc_insertion_point(copy_constructor:rvpb.RvReceiverConfig)
}
inline PROTOBUF_NDEBUG_INLINE RvReceiverConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        packet_encodings_{visibility, arena} {}

inline void RvReceiverConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_latency_),
           0,
           offsetof(Impl_, resampler_profile_) -
               offsetof(Impl_, target_latency_) +
               sizeof(Impl_::resampler_profile_));
}
RvReceiverConfig::~RvReceiverConfig() {
  // @@protoc_insertion_point(destructor:rvpb.RvReceiverConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvReceiverConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_latency_;
  delete _impl_.no_playback_timeout_;
  delete _impl_.choppy_playback_timeout_;
  delete _impl_.latency_tolerance_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvReceiverConfig::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_._cached_size_),
              false,
          },
          &RvReceiverConfig::MergeImpl,
          &RvReceiverConfig::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvReceiverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvReceiverConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packet_encodings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_latency_ != nullptr);
      _impl_.target_latency_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.no_playback_timeout_ != nullptr);
      _impl_.no_playback_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.choppy_playback_timeout_ != nullptr);
      _impl_.choppy_playback_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.latency_tolerance_ != nullptr);
      _impl_.latency_tolerance_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.latency_tuner_backend_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.resampler_profile_) -
        reinterpret_cast<char*>(&_impl_.latency_tuner_backend_)) + sizeof(_impl_.resampler_profile_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvReceiverConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 0, 2> RvReceiverConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965440,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RvReceiverConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvReceiverConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .rvpb.RvPacketEncoding packet_encodings = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.packet_encodings_)}},
    // optional .rvpb.RvLatencyTunerBackend latency_tuner_backend = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvReceiverConfig, _impl_.latency_tuner_backend_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.latency_tuner_backend_)}},
    // optional .rvpb.RvLatencyTunerProfile latency_tuner_profile = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvReceiverConfig, _impl_.latency_tuner_profile_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.latency_tuner_profile_)}},
    // optional .rvpb.RvResamplerBackend resampler_backend = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvReceiverConfig, _impl_.resampler_backend_), 6>(),
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.resampler_backend_)}},
    // optional .rvpb.RvResamplerProfile resampler_profile = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvReceiverConfig, _impl_.resampler_profile_), 7>(),
     {40, 7, 0, PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.resampler_profile_)}},
    // optional .google.protobuf.Duration target_latency = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 1, PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.target_latency_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .google.protobuf.Duration no_playback_timeout = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 2, PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.no_playback_timeout_)}},
    // optional .google.protobuf.Duration choppy_playback_timeout = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 2, 3, PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.choppy_playback_timeout_)}},
    // optional .google.protobuf.Duration latency_tolerance = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 3, 4, PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.latency_tolerance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .rvpb.RvPacketEncoding packet_encodings = 1;
    {PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.packet_encodings_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .rvpb.RvLatencyTunerBackend latency_tuner_backend = 2;
    {PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.latency_tuner_backend_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rvpb.RvLatencyTunerProfile latency_tuner_profile = 3;
    {PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.latency_tuner_profile_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rvpb.RvResamplerBackend resampler_backend = 4;
    {PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.resampler_backend_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .rvpb.RvResamplerProfile resampler_profile = 5;
    {PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.resampler_profile_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .google.protobuf.Duration target_latency = 6;
    {PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.target_latency_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration no_playback_timeout = 9;
    {PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.no_playback_timeout_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration choppy_playback_timeout = 10;
    {PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.choppy_playback_timeout_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Duration latency_tolerance = 11;
    {PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.latency_tolerance_), _Internal::kHasBitsOffset + 3, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rvpb::RvPacketEncoding>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
  }},
};

::uint8_t* RvReceiverConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvReceiverConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .rvpb.RvPacketEncoding packet_encodings = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_packet_encodings_size());
       i < n; i++) {
    const auto& repfield = this->_internal_packet_encodings().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .rvpb.RvLatencyTunerBackend latency_tuner_backend = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_latency_tuner_backend(), target);
  }

  // optional .rvpb.RvLatencyTunerProfile latency_tuner_profile = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_latency_tuner_profile(), target);
  }

  // optional .rvpb.RvResamplerBackend resampler_backend = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_resampler_backend(), target);
  }

  // optional .rvpb.RvResamplerProfile resampler_profile = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_resampler_profile(), target);
  }

  // optional .google.protobuf.Duration target_latency = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *_impl_.target_latency_, _impl_.target_latency_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration no_playback_timeout = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *_impl_.no_playback_timeout_, _impl_.no_playback_timeout_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration choppy_playback_timeout = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *_impl_.choppy_playback_timeout_, _impl_.choppy_playback_timeout_->GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration latency_tolerance = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *_impl_.latency_tolerance_, _impl_.latency_tolerance_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvReceiverConfig)
  return target;
}

::size_t RvReceiverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvReceiverConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rvpb.RvPacketEncoding packet_encodings = 1;
  total_size += 1UL * this->_internal_packet_encodings_size();
  for (const auto& msg : this->_internal_packet_encodings()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .google.protobuf.Duration target_latency = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_latency_);
    }

    // optional .google.protobuf.Duration no_playback_timeout = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.no_playback_timeout_);
    }

    // optional .google.protobuf.Duration choppy_playback_timeout = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.choppy_playback_timeout_);
    }

    // optional .google.protobuf.Duration latency_tolerance = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.latency_tolerance_);
    }

    // optional .rvpb.RvLatencyTunerBackend latency_tuner_backend = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_latency_tuner_backend());
    }

    // optional .rvpb.RvLatencyTunerProfile latency_tuner_profile = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_latency_tuner_profile());
    }

    // optional .rvpb.RvResamplerBackend resampler_backend = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_backend());
    }

    // optional .rvpb.RvResamplerProfile resampler_profile = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_resampler_profile());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvReceiverConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvReceiverConfig*>(&to_msg);
  auto& from = static_cast<const RvReceiverConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvReceiverConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_packet_encodings()->MergeFrom(
      from._internal_packet_encodings());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.target_latency_ != nullptr);
      if (_this->_impl_.target_latency_ == nullptr) {
        _this->_impl_.target_latency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.target_latency_);
      } else {
        _this->_impl_.target_latency_->MergeFrom(*from._impl_.target_latency_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.no_playback_timeout_ != nullptr);
      if (_this->_impl_.no_playback_timeout_ == nullptr) {
        _this->_impl_.no_playback_timeout_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.no_playback_timeout_);
      } else {
        _this->_impl_.no_playback_timeout_->MergeFrom(*from._impl_.no_playback_timeout_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.choppy_playback_timeout_ != nullptr);
      if (_this->_impl_.choppy_playback_timeout_ == nullptr) {
        _this->_impl_.choppy_playback_timeout_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.choppy_playback_timeout_);
      } else {
        _this->_impl_.choppy_playback_timeout_->MergeFrom(*from._impl_.choppy_playback_timeout_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.latency_tolerance_ != nullptr);
      if (_this->_impl_.latency_tolerance_ == nullptr) {
        _this->_impl_.latency_tolerance_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.latency_tolerance_);
      } else {
        _this->_impl_.latency_tolerance_->MergeFrom(*from._impl_.latency_tolerance_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.latency_tuner_backend_ = from._impl_.latency_tuner_backend_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.latency_tuner_profile_ = from._impl_.latency_tuner_profile_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.resampler_backend_ = from._impl_.resampler_backend_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.resampler_profile_ = from._impl_.resampler_profile_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvReceiverConfig::CopyFrom(const RvReceiverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvReceiverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvReceiverConfig::IsInitialized() const {
  return true;
}

void RvReceiverConfig::InternalSwap(RvReceiverConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.packet_encodings_.InternalSwap(&other->_impl_.packet_encodings_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.resampler_profile_)
      + sizeof(RvReceiverConfig::_impl_.resampler_profile_)
      - PROTOBUF_FIELD_OFFSET(RvReceiverConfig, _impl_.target_latency_)>(
          reinterpret_cast<char*>(&_impl_.target_latency_),
          reinterpret_cast<char*>(&other->_impl_.target_latency_));
}

::google::protobuf::Metadata RvReceiverConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[10]);
}
// ===================================================================

class RvDeviceEncoding::_Internal {
 public:
  using HasBits = decltype(std::declval<RvDeviceEncoding>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_._has_bits_);
};

void RvDeviceEncoding::clear_buffer_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.buffer_length_ != nullptr) _impl_.buffer_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RvDeviceEncoding::RvDeviceEncoding(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvDeviceEncoding)
}
inline PROTOBUF_NDEBUG_INLINE RvDeviceEncoding::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RvDeviceEncoding::RvDeviceEncoding(
    ::google::protobuf::Arena* arena,
    const RvDeviceEncoding& from)
    : ::google::protobuf::Message(arena) {
  RvDeviceEncoding* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.buffer_length_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.buffer_length_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sample_rate_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sample_rate_),
           offsetof(Impl_, track_count_) -
               offsetof(Impl_, sample_rate_) +
               sizeof(Impl_::track_count_));

  // @@protoc_insertion_point(copy_constructor:rvpb.RvDeviceEncoding)
}
inline PROTOBUF_NDEBUG_INLINE RvDeviceEncoding::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RvDeviceEncoding::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, buffer_length_),
           0,
           offsetof(Impl_, track_count_) -
               offsetof(Impl_, buffer_length_) +
               sizeof(Impl_::track_count_));
}
RvDeviceEncoding::~RvDeviceEncoding() {
  // @@protoc_insertion_point(destructor:rvpb.RvDeviceEncoding)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvDeviceEncoding::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.buffer_length_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvDeviceEncoding::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_._cached_size_),
              false,
          },
          &RvDeviceEncoding::MergeImpl,
          &RvDeviceEncoding::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvDeviceEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvDeviceEncoding)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.buffer_length_ != nullptr);
    _impl_.buffer_length_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.sample_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.track_count_) -
        reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.track_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvDeviceEncoding::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> RvDeviceEncoding::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RvDeviceEncoding_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvDeviceEncoding>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 track_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvDeviceEncoding, _impl_.track_count_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.track_count_)}},
    // optional uint32 sample_rate = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvDeviceEncoding, _impl_.sample_rate_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.sample_rate_)}},
    // optional .rvpb.RvChannelLayout channel_layout = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvDeviceEncoding, _impl_.channel_layout_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.channel_layout_)}},
    // optional .google.protobuf.Duration buffer_length = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.buffer_length_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 sample_rate = 1;
    {PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.sample_rate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .rvpb.RvChannelLayout channel_layout = 2;
    {PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.channel_layout_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .google.protobuf.Duration buffer_length = 3;
    {PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.buffer_length_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 track_count = 4;
    {PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.track_count_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
  }},
};

::uint8_t* RvDeviceEncoding::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvDeviceEncoding)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sample_rate = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_sample_rate(), target);
  }

  // optional .rvpb.RvChannelLayout channel_layout = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_channel_layout(), target);
  }

  // optional .google.protobuf.Duration buffer_length = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.buffer_length_, _impl_.buffer_length_->GetCachedSize(), target, stream);
  }

  // optional uint32 track_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_track_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvDeviceEncoding)
  return target;
}

::size_t RvDeviceEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvDeviceEncoding)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .google.protobuf.Duration buffer_length = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.buffer_length_);
    }

    // optional uint32 sample_rate = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sample_rate());
    }

    // optional .rvpb.RvChannelLayout channel_layout = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_layout());
    }

    // optional uint32 track_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_track_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvDeviceEncoding::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvDeviceEncoding*>(&to_msg);
  auto& from = static_cast<const RvDeviceEncoding&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvDeviceEncoding)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.buffer_length_ != nullptr);
      if (_this->_impl_.buffer_length_ == nullptr) {
        _this->_impl_.buffer_length_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.buffer_length_);
      } else {
        _this->_impl_.buffer_length_->MergeFrom(*from._impl_.buffer_length_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_layout_ = from._impl_.channel_layout_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.track_count_ = from._impl_.track_count_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvDeviceEncoding::CopyFrom(const RvDeviceEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvDeviceEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvDeviceEncoding::IsInitialized() const {
  return true;
}

void RvDeviceEncoding::InternalSwap(RvDeviceEncoding* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.track_count_)
      + sizeof(RvDeviceEncoding::_impl_.track_count_)
      - PROTOBUF_FIELD_OFFSET(RvDeviceEncoding, _impl_.buffer_length_)>(
          reinterpret_cast<char*>(&_impl_.buffer_length_),
          reinterpret_cast<char*>(&other->_impl_.buffer_length_));
}

::google::protobuf::Metadata RvDeviceEncoding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[11]);
}
// ===================================================================

class RvPacketEncoding::_Internal {
 public:
  using HasBits = decltype(std::declval<RvPacketEncoding>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_._has_bits_);
};

RvPacketEncoding::RvPacketEncoding(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rvpb.RvPacketEncoding)
}
RvPacketEncoding::RvPacketEncoding(
    ::google::protobuf::Arena* arena, const RvPacketEncoding& from)
    : RvPacketEncoding(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RvPacketEncoding::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RvPacketEncoding::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, encoding_id_),
           0,
           offsetof(Impl_, track_count_) -
               offsetof(Impl_, encoding_id_) +
               sizeof(Impl_::track_count_));
}
RvPacketEncoding::~RvPacketEncoding() {
  // @@protoc_insertion_point(destructor:rvpb.RvPacketEncoding)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RvPacketEncoding::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RvPacketEncoding::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_._cached_size_),
              false,
          },
          &RvPacketEncoding::MergeImpl,
          &RvPacketEncoding::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RvPacketEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:rvpb.RvPacketEncoding)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.encoding_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.channel_layout_) -
      reinterpret_cast<char*>(&_impl_.encoding_id_)) + sizeof(_impl_.channel_layout_));
  _impl_.track_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RvPacketEncoding::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> RvPacketEncoding::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RvPacketEncoding_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rvpb::RvPacketEncoding>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 encoding_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvPacketEncoding, _impl_.encoding_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.encoding_id_)}},
    // uint32 sample_rate = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvPacketEncoding, _impl_.sample_rate_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.sample_rate_)}},
    // .rvpb.RvSampleFormat sample_format = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvPacketEncoding, _impl_.sample_format_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.sample_format_)}},
    // .rvpb.RvChannelLayout channel_layout = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvPacketEncoding, _impl_.channel_layout_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.channel_layout_)}},
    // optional uint32 track_count = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RvPacketEncoding, _impl_.track_count_), 0>(),
     {40, 0, 0, PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.track_count_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 encoding_id = 1;
    {PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.encoding_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 sample_rate = 2;
    {PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.sample_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .rvpb.RvSampleFormat sample_format = 3;
    {PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.sample_format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .rvpb.RvChannelLayout channel_layout = 4;
    {PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.channel_layout_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional uint32 track_count = 5;
    {PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.track_count_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RvPacketEncoding::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rvpb.RvPacketEncoding)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 encoding_id = 1;
  if (this->_internal_encoding_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_encoding_id(), target);
  }

  // uint32 sample_rate = 2;
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_sample_rate(), target);
  }

  // .rvpb.RvSampleFormat sample_format = 3;
  if (this->_internal_sample_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_sample_format(), target);
  }

  // .rvpb.RvChannelLayout channel_layout = 4;
  if (this->_internal_channel_layout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_channel_layout(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 track_count = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_track_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rvpb.RvPacketEncoding)
  return target;
}

::size_t RvPacketEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rvpb.RvPacketEncoding)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 encoding_id = 1;
  if (this->_internal_encoding_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_encoding_id());
  }

  // uint32 sample_rate = 2;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_sample_rate());
  }

  // .rvpb.RvSampleFormat sample_format = 3;
  if (this->_internal_sample_format() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_sample_format());
  }

  // .rvpb.RvChannelLayout channel_layout = 4;
  if (this->_internal_channel_layout() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_layout());
  }

  // optional uint32 track_count = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_track_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RvPacketEncoding::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RvPacketEncoding*>(&to_msg);
  auto& from = static_cast<const RvPacketEncoding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rvpb.RvPacketEncoding)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_encoding_id() != 0) {
    _this->_impl_.encoding_id_ = from._impl_.encoding_id_;
  }
  if (from._internal_sample_rate() != 0) {
    _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
  }
  if (from._internal_sample_format() != 0) {
    _this->_impl_.sample_format_ = from._impl_.sample_format_;
  }
  if (from._internal_channel_layout() != 0) {
    _this->_impl_.channel_layout_ = from._impl_.channel_layout_;
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.track_count_ = from._impl_.track_count_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RvPacketEncoding::CopyFrom(const RvPacketEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rvpb.RvPacketEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RvPacketEncoding::IsInitialized() const {
  return true;
}

void RvPacketEncoding::InternalSwap(RvPacketEncoding* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.track_count_)
      + sizeof(RvPacketEncoding::_impl_.track_count_)
      - PROTOBUF_FIELD_OFFSET(RvPacketEncoding, _impl_.encoding_id_)>(
          reinterpret_cast<char*>(&_impl_.encoding_id_),
          reinterpret_cast<char*>(&other->_impl_.encoding_id_));
}

::google::protobuf::Metadata RvPacketEncoding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_driver_5fprotocol_2eproto_getter,
                                   &descriptor_table_driver_5fprotocol_2eproto_once,
                                   file_level_metadata_driver_5fprotocol_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rvpb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_driver_5fprotocol_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
